%{
#include "ProgramTypes.h"
#include "GeneralFunctions.h"
#include "CodeGenerator.h"
#include "cg.hpp"
#include "hw3_output.hpp"

extern int yylex();
extern int yylineno;
extern char* yytext;
extern StackTable stackTable;
extern CodeGenerator codeGenerator;
extern CodeBuffer buffer;
void yyerror(const char* message);

%}

%token INT BYTE B BOOL TRUE FALSE IF RETURN WHILE BREAK CONTINUE SC ID STRING NUM

%right ASSIGN 
%left OR
%left AND
%left GE
%left GT
%left LE
%left LT
%left EQ
%left NE
%left ADD SUB
%left MULTIPLY DIVIDE
%right NOT
%right LPAREN
%left RPAREN
%right LBRACE
%left RBRACE
%right ELSE   

%%
Program: Statements                                                     { $$ = new Program(); }                                                                               
Statements: Statement                                                   { $$ = new Statements(dynamic_cast<Statement*>($1)); }
            | Statements Statement                                      { $$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2)); }
                                                                        
Statement: LBRACE ADDSCOPE Statements REMOVESCOPE RBRACE                { $$ = new Statement(dynamic_cast<Statement*>($3)); } 
            | Type ID SC                                                { $$ = new Statement(dynamic_cast<Type*>($1), $2); }
            | Type ID ASSIGN Exp SC                                     { $$ = new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Expression*>($4)); } 
            | ID ASSIGN Exp SC                                          { $$ = new Statement($1, dynamic_cast<Expression*>($3)); } 

            | Call SC                                                   { $$ = new Statement(dynamic_cast<Call*>($1)); }

            | RETURN SC                                                 { codeGenerator.emitFuncRet(); } 

            | IF LPAREN IfMark RPAREN ADDSCOPE Statement REMOVESCOPE    { $$ = new Statement("IF", dynamic_cast<BooleanExpression*>($3)); } 
           

            | IF LPAREN IfMark RPAREN ADDSCOPE Statement ELSE ElseMark  { buffer.emit(($3)->getFalseLable() + ":"); } ADDSCOPE Statement
                                                                        {
                                                                            $$ = new Statement("ELF", dynamic_cast<BooleanExpression*>($3));
                                                                            stackTable.popScope(); 
                                                                        }  
                                                                        REMOVESCOPE { }  

            | WHILE NEWLOOPSCOPE LPAREN Exp RPAREN                      {    
                                                                            Expression* exp = dynamic_cast<Expression*>($4);
                                                                            buffer.emit(exp->getTrueLable() + ":");
                                                                            Statement { $$ = new Statement("WHILE", dynamic_cast<BooleanExpression*>($3)); }          
                                                                            endingLoopMarker();                                              
                                                                        } 

            | BREAK SC                                                  { $$ = new Statement($1); }
            | CONTINUE SC                                               { $$ = new Statement($1); }

Call:   ID LPAREN Exp RPAREN                                            { $$ = new Call($1, dynamic_cast<BooleanExpression*>($3));} 

Type:   INT                                                             { $$ = new Type("int"); }
        | BYTE                                                          { $$ = new Type("byte"); } 
        | BOOL                                                          { $$ = new Type("bool"); }

Exp:    LPAREN Exp RPAREN                                               { $$ = new Expression($2); }    

        | Exp ADD Exp                                                   { $$ = new Expression($1, $3, "add"); }
        | Exp SUB Exp                                                   { $$ = new Expression($1, $3, "sub"); } 
        | Exp DIVIDE Exp                                                { $$ = new Expression($1, $3, "DIV"); }
        | Exp MULTIPLY Exp                                              { $$ = new Expression($1, $3, "mul"); }

        | ID                                                            { $$ = new Expression($1); } 

        | Call                                                          { $$ = new BooleanExpression($1); }

        | NUM                                                           { $$ = new Num($1); }
        | NUM B                                                         { $$ = new NumB($1); }
        | STRING                                                        { $$ = new String($1); }
        | TRUE                                                          { $$ = new Bool("true"); }
        | FALSE                                                         { $$ = new Bool("false"); }

        | NOT Exp                                                       { $$ = BooleanExpression(dynamic_cast<BooleanExpression*($2), "not")}

        | Exp AND Exp EmitAnd Exp                                       { $$ = new BooleanExpression($1, $3, "AND");} 
        | Exp OR Exp  EmitOr Exp                                        { $$ = new BooleanExpression($1, $3, "OR"); }
        | Exp EQ Exp                                                    { $$ = new BooleanExpression($1, $3, "EQ"); }
        | Exp NE Exp                                                    { $$ = new BooleanExpression($1, $3, "NE"); }
        | Exp GE Exp                                                    { $$ = new BooleanExpression($1, $3, "GE"); }
        | Exp GT Exp                                                    { $$ = new BooleanExpression($1, $3, "GT"); }
        | Exp LE Exp                                                    { $$ = new BooleanExpression($1, $3, "LE"); }
        | Exp LT Exp                                                    { $$ = new BooleanExpression($1, $3, "LT"); }

        | LPAREN Type RPAREN Exp                                        { $$ = new Expression(dynamic_cast<Type*>($2), $4);}

;

///pushLoopScope WHILE///
NEWLOOPSCOPE:                                                           {
                                                                            stackTable.pushScope(true);
                                                                        }
;
///pushScope///
ADDSCOPE:                                                               {
                                                                            stackTable.pushScope(false);
                                                                        }
;
///popScope///
REMOVESCOPE:                                                            {
                                                                            stackTable.popScope();
                                                                        }
;
///handle IF///
IFMARK: Exp                                                             { 
                                                                            isBoolExp($1); $$=$1; codeGenerator.generateElfStatements(dynamic_cast<BooleanExpression*> (Exp), true);
                                                                        }
///handle ELSE///
ELSEMARK:                                                               {
                                                                            Statement* currSate = dynamic_cast<Statement*>($6);
                                                                            currSate->afterElse();
   
                                                                        }       
;
///Emit And///
EMITAND:                                                                {
                                                                            buffer.emit(dynamic_cast<Expression*>($1)->getTrueLable() + ":" );
                                                                        }
;

///Emit Or///
EMITOR:                                                                 {
                                                                            buffer.emit(dynamic_cast<Expression*>($1)->getFalseLable() + ":" );
                                                                        }
;

%%
StackTable stackTable = StackTable();
CodeGenerator codeGenerator = CodeGenerator();

int main() 
{
    codeGenerator.emitGlobal();
    int res = yyparse();
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();

    return res;
}

void yyerror(const char *s) 
{
    output::errorSyn(yylineno);
    exit(0);
}